// To regenerate api.pb.go run hack/update-device-plugin.sh
syntax = 'proto3';

package deviceplugin;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// DevicePlugin is the service advertised by Device Plugins
service DevicePlugin {
	// Register is called by the Kubelet after the device plugin placed
	// it's socket inside the kubelet's device plugin standard registration path
	rpc GetPluginInfo(GetPluginInfoRequest) returns (GetPluginInfoResponse) {}
	// ListAndWatch returns a stream of List of Devices
	// Whenever a Device state change or a Device disapears, ListAndWatch
	// returns the new list
	rpc ListAndWatch(ListAndWatchRequest) returns (stream ListAndWatchResponse) {}

	// AdmitPod is called during pod admission
	rpc AdmitPod(AdmitPodRequest) returns (AdmitPodResponse) {}

	// InitializeContainer is called during container creation
	rpc InitContainer(InitContainerRequest) returns (InitContainerResponse) {}
}

// A request sent by the Kubelet to the device plugin containing the kubelet version
message GetPluginInfoRequest {
}

// The response sent containing the name of the plugin as well as it's expected InitializeContainer max timeout
message GetPluginInfoResponse {
	// timeout in seconds for the Init call
	int64 init_timeout = 1;
	// labels to advertise on the node
	map<string, string> labels = 2;
}

// The message sent when calling ListAndWatch
message ListAndWatchRequest {
}

// ListAndWatch returns a stream of List of Devices
// Whenever a Device state change or a Device disapears, ListAndWatch
// returns the new list
message ListAndWatchResponse {
	repeated Device devices = 1;
}

// AdmitPodRequest is a call issued by the kubelet during pod admission
// TODO change this for CPU manager
message AdmitPodRequest {
	// Name of the pod
	string pod_name = 1;

	// map of InitContainers with the assigned devices
	map<string, Container> init_containers = 2;

	// map of Containers with the assigned devices
	map<string, Container> containers = 3;
}

message AdmitPodResponse {
	// Spec to add to the pod
	PodSpec pod = 1;
}

// Init Container request is expected to be called before container start
// This call is synchronous
message InitContainerRequest{
	// The container that is being started
	Container container = 1;
}

message InitContainerResponse {
	// The spec to inject into the container
	ContainerSpec spec = 1;
}

/* E.g:
* struct Device {
*    ID: "GPU-fef8089b-4820-abfc-e83e-94318197576e",
*    State: "Healthy",
*    Attributes: {
*       "memory": "8000",
*    }
*} */
message Device {
	// A unique ID assigned by the device plugin used
	// to identify devices during the communication
	// Max length of this field is 63 characters
	string ID = 1;
	// Health of the device, can be healthy or unhealthy, see constants.go
	string health = 2;
	// Attributes of the device must start by vendor name (e.g "nvidia.com/gpu/memory")
	map<string, string> Attributes = 3;
}

message Container {
	// The name of the Container
	string name = 1;

	// The device assigned to that container
	repeated string devices = 2;
}

message ContainerSpec {
	// List of environment variable to be set in the container to access one of more devices.
	map<string, string> envs = 1;
	// Mounts for the container.
	repeated Mount mounts = 2;
	// Devices for the container.
	repeated DeviceSpec devices = 3;
	// Annotations for the container
	map<string, string> annotations = 4;
}

message PodSpec {
	// Annotations for the pod
	map<string, string> annotations = 1;
}


// Mount specifies a host volume to mount into a container.
// where device library or tools are installed on host and container
message Mount {
	// Path of the mount within the container.
	string container_path = 1;
	// Path of the mount on the host.
	string host_path = 2;
	// If set, the mount is read-only.
	bool read_only = 3;
}

// DeviceSpec specifies a host device to mount into a container.
message DeviceSpec {
    // Path of the device within the container.
    string container_path = 1;
    // Path of the device on the host.
    string host_path = 2;
    // Cgroups permissions of the device, candidates are one or more of
    // * r - allows container to read from the specified device.
    // * w - allows container to write to the specified device.
    // * m - allows container to create device files that do not yet exist.
    string permissions = 3;
}
